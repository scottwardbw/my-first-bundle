{"remainingRequest":"/Users/scott.ward/.npm/_npx/4883/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/scott.ward/Documents/GitHub/my-first-bundle/src/lib/create-transform.js","dependencies":[{"path":"/Users/scott.ward/Documents/GitHub/my-first-bundle/src/lib/create-transform.js","mtime":1630405864577},{"path":"/Users/scott.ward/.npm/_npx/4883/lib/node_modules/@vizia/app-emulator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/scott.ward/.npm/_npx/4883/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Y29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpOwoKZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtKCkgewogIHJldHVybiB7CiAgICB0cmFuc2Zvcm06IChkYXRhLCBwaXBlbGluZSkgPT4gewogICAgICBsZXQgbW9uc3RlcnMgPSBbXTsKICAgICAgY29uc3QgewogICAgICAgIGxlZ2VuZGFyeSwKICAgICAgICBtb25zdGVyVHlwZSwKICAgICAgICBzaXplCiAgICAgIH0gPSBwaXBlbGluZS5jb25maWcuc2NlbmUub3B0aW9ucywKICAgICAgICAgICAgdXJsID0gYGh0dHBzOi8vd3d3LmRuZDVlYXBpLmNvYDsKICAgICAgYXhpb3MuYWxsKGRhdGEubWFwKGQgPT4gewogICAgICAgIHJldHVybiBheGlvcy5nZXQoYCR7dXJsfSR7ZC51cmx9YCk7CiAgICAgIH0pKS50aGVuKGpzb25EYXRhID0+IHsKICAgICAgICBqc29uRGF0YS5mb3JFYWNoKGQgPT4gbW9uc3RlcnMucHVzaChkLmRhdGEpKTsKCiAgICAgICAgaWYgKGxlZ2VuZGFyeSA9PT0gYHllc2ApIHsKICAgICAgICAgIG1vbnN0ZXJzID0gbW9uc3RlcnMuZmlsdGVyKG0gPT4gewogICAgICAgICAgICB2YXIgX20kbGVnZW5kYXJ5X2FjdGlvbnM7CgogICAgICAgICAgICByZXR1cm4gKG0gPT09IG51bGwgfHwgbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9tJGxlZ2VuZGFyeV9hY3Rpb25zID0gbS5sZWdlbmRhcnlfYWN0aW9ucykgPT09IG51bGwgfHwgX20kbGVnZW5kYXJ5X2FjdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tJGxlZ2VuZGFyeV9hY3Rpb25zLmxlbmd0aCkgPiAwOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChsZWdlbmRhcnkgPT09IGBub2ApIHsKICAgICAgICAgIG1vbnN0ZXJzID0gbW9uc3RlcnMuZmlsdGVyKG0gPT4gbS5sZWdlbmRhcnlfYWN0aW9ucyA9PT0gYHVuZGVmaW5lZGApOwogICAgICAgIH0KCiAgICAgICAgaWYgKG1vbnN0ZXJUeXBlICE9PSBgYWxsYCkgewogICAgICAgICAgbW9uc3RlcnMgPSBtb25zdGVycy5maWx0ZXIobSA9PiBtLnR5cGUgPT09IG1vbnN0ZXJUeXBlKTsKICAgICAgICB9CgogICAgICAgIGlmIChzaXplICE9PSBgYWxsYCkgewogICAgICAgICAgbW9uc3RlcnMgPSBtb25zdGVycy5maWx0ZXIobSA9PiBtLnNpemUgPT09IHNpemUpOwogICAgICAgIH0KCiAgICAgICAgcGlwZWxpbmUucHVzaChtb25zdGVycyk7CiAgICAgICAgcGlwZWxpbmUuZG9uZSgpOwogICAgICB9KTsKICAgIH0KICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVRyYW5zZm9ybTs="},{"version":3,"sources":["/Users/scott.ward/Documents/GitHub/my-first-bundle/src/lib/create-transform.js"],"names":["axios","require","createTransform","transform","data","pipeline","monsters","legendary","monsterType","size","config","scene","options","url","all","map","d","get","then","jsonData","forEach","push","filter","m","legendary_actions","length","type","done","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,eAAT,GAA2B;AACvB,SAAO;AACHC,IAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC3B,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,WAAb;AAA0BC,QAAAA;AAA1B,UAAmCJ,QAAQ,CAACK,MAAT,CAAgBC,KAAhB,CAAsBC,OAA/D;AAAA,YACIC,GAAG,GAAI,yBADX;AAGAb,MAAAA,KAAK,CAACc,GAAN,CACQV,IAAI,CAACW,GAAL,CAASC,CAAC,IAAI;AACV,eAAOhB,KAAK,CAACiB,GAAN,CAAW,GAAEJ,GAAI,GAAEG,CAAC,CAACH,GAAI,EAAzB,CAAP;AACH,OAFD,CADR,EAKKK,IALL,CAKUC,QAAQ,IAAI;AACdA,QAAAA,QAAQ,CAACC,OAAT,CAAiBJ,CAAC,IAAIV,QAAQ,CAACe,IAAT,CAAcL,CAAC,CAACZ,IAAhB,CAAtB;;AAEA,YAAIG,SAAS,KAAM,KAAnB,EAAyB;AACrBD,UAAAA,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgBC,CAAC;AAAA;;AAAA,mBAAI,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,oCAAAA,CAAC,CAAEC,iBAAH,8EAAsBC,MAAtB,IAA+B,CAAnC;AAAA,WAAjB,CAAX;AACH,SAFD,MAGK,IAAIlB,SAAS,KAAM,IAAnB,EAAwB;AACzBD,UAAAA,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACC,iBAAF,KAAyB,WAA9C,CAAX;AACH;;AAED,YAAIhB,WAAW,KAAM,KAArB,EAA2B;AACvBF,UAAAA,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACG,IAAF,KAAWlB,WAAhC,CAAX;AACH;;AAED,YAAIC,IAAI,KAAM,KAAd,EAAoB;AAChBH,UAAAA,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgBC,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWA,IAAhC,CAAX;AACH;;AAEDJ,QAAAA,QAAQ,CAACgB,IAAT,CAAcf,QAAd;AACAD,QAAAA,QAAQ,CAACsB,IAAT;AACH,OAzBL;AA0BH;AAhCE,GAAP;AAkCH;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,eAAjB","sourcesContent":["const axios = require('axios');\n\nfunction createTransform() {\n    return {\n        transform: (data, pipeline) => {\n            let monsters = [];\n            const { legendary, monsterType, size } = pipeline.config.scene.options,\n                url = `https://www.dnd5eapi.co`;\n\n            axios.all(\n                    data.map(d => {\n                        return axios.get(`${url}${d.url}`)\n                    })\n                )\n                .then(jsonData => {\n                    jsonData.forEach(d => monsters.push(d.data));\n\n                    if (legendary === `yes`) {\n                        monsters = monsters.filter(m => m?.legendary_actions?.length > 0);\n                    }\n                    else if (legendary === `no`) {\n                        monsters = monsters.filter(m => m.legendary_actions === `undefined`);\n                    }\n\n                    if (monsterType !== `all`) {\n                        monsters = monsters.filter(m => m.type === monsterType);\n                    }\n\n                    if (size !== `all`) {\n                        monsters = monsters.filter(m => m.size === size);\n                    }\n\n                    pipeline.push(monsters);\n                    pipeline.done();\n                })\n        }\n    }\n}\n\nmodule.exports = createTransform\n"]}]}