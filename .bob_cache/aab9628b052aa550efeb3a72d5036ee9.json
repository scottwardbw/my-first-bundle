{"remainingRequest":"/Users/scott.ward/.npm/_npx/5239/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/scott.ward/Documents/GitHub/my-first-bundle/node_modules/readable-stream/lib/_stream_readable.js","dependencies":[{"path":"/Users/scott.ward/Documents/GitHub/my-first-bundle/node_modules/readable-stream/lib/_stream_readable.js","mtime":1629972623311},{"path":"/Users/scott.ward/.npm/_npx/5239/lib/node_modules/@vizia/app-emulator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/scott.ward/.npm/_npx/5239/lib/node_modules/@vizia/app-emulator/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/scott.ward/Documents/GitHub/my-first-bundle/node_modules/readable-stream/lib/_stream_readable.js"],"names":["pna","require","module","exports","Readable","isArray","Duplex","ReadableState","EE","EventEmitter","EElistenerCount","emitter","type","listeners","length","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","chunk","from","_isUint8Array","obj","isBuffer","util","Object","create","inherits","debugUtil","debug","debuglog","BufferList","destroyImpl","StringDecoder","kProxyEvents","prependListener","event","fn","_events","on","unshift","options","stream","isDuplex","objectMode","readableObjectMode","hwm","highWaterMark","readableHwm","readableHighWaterMark","defaultHwm","Math","floor","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","destroyed","defaultEncoding","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","destroy","_destroy","call","defineProperty","prototype","get","undefined","set","value","_undestroy","undestroy","err","cb","push","state","skipChunkCheck","readableAddChunk","addToFront","onEofChunk","er","chunkInvalid","emit","getPrototypeOf","Error","addChunk","write","maybeReadMore","needMoreData","emitReadable","TypeError","isPaused","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","head","data","parseInt","nOrig","endReadable","doRead","ret","fromList","end","nextTick","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","process","stdout","stderr","endFn","onend","unpipe","once","onunpipe","unpipeInfo","hasUnpiped","cleanup","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","increasedAwaitDrain","indexOf","pause","resume","dests","i","index","splice","ev","res","nReadingNextTick","addListener","self","resume_","wrap","_this","paused","method","apply","arguments","bind","enumerable","_fromList","shift","join","concat","clear","fromListPartial","list","hasStrings","slice","copyFromBufferString","copyFromBuffer","p","c","next","str","nb","tail","allocUnsafe","copy","buf","endReadableNT","xs","x","l"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}"]}]}